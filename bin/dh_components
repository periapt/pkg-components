#!/usr/bin/perl
use strict;
use warnings;
use Debian::Debhelper::Dh_Lib;
use Debian::Debhelper::Dh_components;
use Readonly;
use Cwd;
Readonly my $COMMA_RE => qr/,/;

Readonly my $CWD => getcwd;

init(options=>{
    "purge!"=>\$dh{PURGE},
    "components=s" => \$dh{COMPONENTS},
    "build_stages=s" => \$dh{BUILD_STAGES},
    "rules_locations=s" => \$dh{RULES_LOCATIONS},
});

# Work through the packages and components
foreach my $package (getpackages()) {

    my $dir = find_components_dir($package);
    next if !$dir;

    my %args = (dir=>$dir, package=>$package);
    if ($dh{BUILD_STAGES}) {
        $args{build_stages} = [split $COMMA_RE, $dh{BUILD_STAGES}];
    }
    if ($dh{COMPONENTS}) {
        $args{components} = [split $COMMA_RE, $dh{COMPONENTS}];
    }
    if ($dh{RULE_LOCATIONS}) {
        $args{rules_locations} = [split $COMMA_RE, $dh{RULES_LOCATIONS}];
    }

    my $component_data = Debian::Debhelper::Dh_components->new(%args);

    foreach my $c ($component_data->components) {

        foreach my $bs ($component_data->build_stages) {
            my $script = $component_data->script($c, $bs);
            my $command = "CURDIR=$CWD PACKAGE=$package DH_COMPONENT=$c $script";
            doit($command);
        }
    }

    $component_data->build_copyright("$CWD/debian/copyright.$package");
}

# Clean up the old components directory
if ($dh{PURGE} or not defined $dh{PURGE}) {
    doit("rm -rf COMPONENTS");
}

exit(0);

sub find_components_dir {
    my $package = shift;

    my $dir = "debian/$package.components";
    return $dir if -d $dir;

    $dir = "debian/components";
    return $dir if -d $dir && $package eq $dh{FIRSTPACKAGE};

    return;
}

=head1 NAME

dh_components - build additional components

=head1 SYNOPSIS

B<dh_components> [S<I<debhelper options>>] [B<--components> I<comp>[,I<comp>,...]]  [B<--build_stages> I<stage>[,I<stage>,...]]  [B<--rules_locations> I<dir>[,I<dir>,...]] 

=head1 DESCRIPTION

C<dh_components> is a debhelper program that is responsible for handling
additional components that come from separate upstream sources. It takes the
following actions:

=over 

=item Run through the various build stages for each package and component.

=item Stitch together the templated files. This is typically how the copyright
file is handled.

=item Generate the C<substvar> file from the component control files. (Not
implemented)

=item Purge the components working directory (unless the I<--no-purge> option
is set).

=back 

=head1 FILES

=over 4

=item debian/I<package>.components

=item debian/components

These directories contain all the component data for a given binary package.
The second form only works for the first binary in a source package and is
overridden by the equivalent first form.

=item debian/[I<package>.]components/I<component>

This is a directory that contains the files specific to that component.
In some ways it is like a cut-down version of the debian directory.

=item debian/[I<package>.]components/I<component>

=item debian/[I<package>.]components/

=item /usr/share/pkg-components/build_stages

These are the default locations of the build stage scripts in the order of 
precedence with highest first. These can be overridden using the
C<--rules_locations>.

=item debian/[I<package>.]components/I<file>.tmpl

This file provides a template for the file debian/I<file>.

=back

=head1 OPTIONS

=over 4

=item B<--build_stages b1,b2,...>

If this option is listed the sequence described will be used instead
of the normal one.

=item B<--components c1,c2,...>

If this option is listed only those components listed will be considered.

=item B<--rules_locations r1,r2,...>

If this option is listed the specified locations will be used instead
of the default ones. One can use C<%> to mean the component. Thus to
explicitly specify the default one would set:

    --rules_locations debian/components/%,debian/components,/usr/share/pkg-components/build_stages

=back

=head1 CONFIGURATION

To enable this functionality it is necessary to pass the argument
C<--with components> to the C<dh> programa in the C<debian/rules>
file.

=head1 SEE ALSO

L<debhelper(1)>

This program is used with debhelper. 

L<quilt(1)>

=head1 AUTHOR

Nicholas Bamber <nicholas@periapt.co.uk>

=cut
