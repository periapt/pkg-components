#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;
use Readonly;
use Carp;
use DirHandle;

Readonly my %VALUED_ARGS=>(
    useragent=>1,
    timeout=>1,
    destdir=>1,
);
Readonly my $MAIN_WATCH_FILE => 'debian/watch';
Readonly my $COMPONENTS_DIR => 'debian/components';

my %watch_files;
my $dry_run = 0;
my $help = 0;
my $man = 0;
my %args = (
    'dry-run'   => \$dry_run,
    'help'      => \$help,
    'man'       => \$man,
);

GetOptions(\%args,
    'dry-run!',
    'help|?',
    'man',
    'report!',
    'report-status!',
    'destdir=s',
    'timeout=i',
    'pasv!',
    'symlink!',
    'pasv!',
    'verbose!',
    'repack',
    'rename',
    'debug',
    'useragent|user-agent=s',
) or pod2usage(2);
pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose=>2) if $man;

delete $args{help};
delete $args{man};
delete $args{'dry-run'};

if (not -r $MAIN_WATCH_FILE) {
    croak "Could not read $MAIN_WATCH_FILE";
}
my $dir = DirHandle->new($COMPONENTS_DIR);
if (defined $dir) {
    for(my $file = $dir->read; defined $file; $file = $dir->read) {
        next if $file =~ m{\A\.}xms;
        next if not -d $file;
        $watch_files{$file} = "$COMPONENTS_DIR/$file/watch";
        if (not -r $watch_files{$file}) {
            croak "Could not read $watch_files{$file}";
        }
    }
}
else {
    croak "Could not read $COMPONENTS_DIR";
}

my $usage = "uscan ";
foreach my $arg (keys %args) {
    if ($VALUED_ARGS{$arg}) {
        $usage .= "--$arg=$args{$arg} ";
    }
    elsif ($args{$arg}) {
        $usage .= "--$arg ";
    }
    else {
        $usage .= "--no-$arg ";
    }
}

if (_doit("$usage --watch=$MAIN_WATCH_FILE")) {
    foreach my $component (keys %watch_files) {
        if ($dry_run) {
            print "\t";
        }
        exit(1) if not _doit("$usage --watch=$watch_files{$component}");
    }
}

exit(0);

sub _doit {
    my $command = shift;
    if ($dry_run) {
        print "$command\n";
        return 1;
    }
    elsif (system($command) == 0) {
        return 1;
    }
    elsif ($? == -1) {
        print "failed to execute: $!\n";
    }
    elsif ($? & 127) {
        my $signal = $? & 127;
        my $preposition = $? & 128 ? 'with' : 'without';
        print "child died with signal $signal, $preposition coredump\n";
    }
    else {
        my $value = $? >> 8;
        print "child exited with value $value\n"
    }
    return 0;
}

#    my $command = "$usage --watch $file";

=head1 NAME

uscan-components - wrapper around uscan for package and components

=head1 SYNOPSIS

B<uscan-components> [S<I<options>>]

=head1 DESCRIPTION

C<uscan-components> is a wrapper around C<uscan> for packages using
C<dh_components>. Firstly it will check that both the package and all
the components have watch files; and will return an error if they do not.
Then it will run uscan on the main watch file. If that downloads something
it will run uscan on each of the components. It accepts a number of 
uscan options all of which are passed onto to each invocation of uscan.

=head1 OPTIONS

=over 4

=item B<--dry-run>

If set no actual uscan will not actually be called but those that might be
will be listed.

=item B<--help>

Prints a brief help message and exits.

=item B<--man>

Prints the manual page and exits.

=item B<--report>

=item B<--report-status>

=item B<--destdir>

=item B<--pasv>

=item B<--no-pasv>

=item B<--timeout>

=item B<--symlink>

=item B<--no-symlink>

=item B<--verbose>

=item B<--no-verbose>

=item B<--rename>

=item B<--repack>

=item B<--debug>

=item B<--user-agent>, B<--useragent>

All of the these arguments are passed straight to each uscan invocation.

=back

=head1 SEE ALSO

L<uscan(1)>

=head1 AUTHOR

Nicholas Bamber <nicholas@periapt.co.uk>

=cut
