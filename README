                pkg-components

PURPOSE

To provide a means of managing the build of components in a Debian package.

HISTORY

Typically there is a one-to-one correspondence between perl modules and
perl debian packages. However the ftp masters generally disallow packages
where the packaging takes up more diskspace than the code. To get round this
related modules are sometimes packaged as a bundle. The code that manages
this is copied from package to package and gets harder to maintain as it
evolves.

The most significant bit of support provided by the Debian infrastructure
for packaging bundles is described in

http://raphaelhertzog.com/2010/09/07/how-to-use-multiple-upstream-tarballs-in-debian-source-packages/

However one must notice this quote:

    The supplementary tarball is now part of the source package but
    we're not making anything useful out of it. We have to modify
    debian/rules... to install the new files in the binary package.

So this package aims to take that support to the next level. Certainly
it aims to do better than the ad hoc code currently in Debian perl packages.

Currently it only supports the core functionality of integrating the 
components into the build process. However there is nothing in the package
which is perl specific.

TODO

* Need to provide a template mechanism for piecing together information from
the components. This will be especially needed for copyright.
* Need to generate substvars so that dependencies can be rationally managed.
* Need to provide some integration with uscan.

INSTRUCTIONS

These instructions assume you have installed the 'pkg-components' package.

1. First prepare your core package as you would normally. So now for 
version V of your package P you have a P directory and the files:
P_V.orig.tar.gz; P_V-1.debian.tar.gz; P_V-1.dsc.

2. Now suppose you have component upstream tarballs C_A_v1.tar.gz and
C_B_v1.tar.gz. You need to choose names for these components which are purely
alphanumeric. [The actual rules are not clear but appear to be determined in 
dpkg-source.] Assume that we name these ca and cb.

3. Now copy the tarballs to the appropriate name
    cp C_A_v1.tar.gz P_V.orig-ca.tar.gz
    cp C_B_v1.tar.gz P_V.orig-cb.tar.gz

4. Create component sub-directories.
    cd P
    mkdir ca cb

5. Unpack the component tarballs into those sub-directories.
    tar -C ca -zxf ../P_V.orig-ca.tar.gz
    tar -C cb -zxf ../P_V.orig-cb.tar.gz
That covers the support in dpkg-source as described in the article listed
above.

